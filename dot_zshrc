# Enables parameter expansion, command substitution, and arithmetic expansion in the prompt string. 
# This is essential for dynamic prompts, like the one generated by Starship
setopt prompt_subst

# Configures Zsh completion to be case-insensitive.
# The pattern m:{a-z}={A-Za-z} means that a lowercase character in the search matches both the lowercase 
# and uppercase version of that character in the suggestions.
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# Loads the bashcompinit function, which allows Zsh to use Bash completion functions. The && bashcompinit executes the function immediately after it's loaded, enabling Bash completion.
autoload bashcompinit && bashcompinit

# Loads the compinit function with the options -U (don't try to update completion files) and -z (don't do any security checking). compinit is the main function for initializing Zsh's powerful completion system.
autoload -Uz compinit

# Executes the compinit function to initialize the completion system.
compinit

# See https://github.com/zsh-users/zsh-autosuggestions/blob/master/INSTALL.md
source ~/.zsh/zsh-autosuggestions/zsh-autosuggestions.zsh

# Binds Ctrl+w to immediately execute the currently suggested command.
bindkey '^w' autosuggest-execute

# Binds Ctrl+e to accept the currently suggested command up to the end of the line.
bindkey '^e' autosuggest-accept

# Binds Ctrl+u to toggle the autosuggestions feature on or off.
bindkey '^u' autosuggest-toggle

# Binds Ctrl+L to the vi-forward-word command, which moves the cursor forward to the beginning of the next word (this is a common VI-mode binding).
#bindkey '^L' vi-forward-word

# Binds Ctrl+k to move up in the command history or search the history if already at the top.
bindkey '^k' up-line-or-search

# Binds Ctrl+j to move down in the command history or search the history if already at the bottom.
bindkey '^j' down-line-or-search


# 1. Word Jumps (Control-Arrow Keys - Replace with your key codes)
# '\e[1;5D' is a common code for Ctrl-Left
bindkey '\e[1;5D' backward-word
# '\e[1;5C' is a common code for Ctrl-Right
bindkey '\e[1;5C' forward-word

# 2. Line Jumps (Home and End Keys - Replace with your key codes)
# '\e[H' is a common code for Home
bindkey '\e[H' beginning-of-line
# '\e[F' is a common code for End
bindkey '\e[F' end-of-line

# Deletes the character under the cursor (Standard Delete key code)
bindkey '^[[3~' delete-char

# Initializes the Starship prompt (a fast, customizable prompt for the shell). The eval executes the shell setup script that starship init zsh outputs, integrating the prompt with Zsh.
eval "$(starship init zsh)"

# Sets an environment variable to specify the path to the Starship configuration file. This tells Starship where to find its customization settings.
export STARSHIP_CONFIG=~/.config/starship/starship.toml

export EDITOR=/usr/bin/nvim


alias la=tree
alias cat=bat

# Eza
alias l="eza -l --icons --git -a"
alias lt="eza --tree --level=2 --long --icons --git"
alias ltree="eza --tree --level=2  --icons --git"

# fzf
# Set up fzf key bindings and fuzzy completion
source <(fzf --zsh)



# NVIM
alias v="/usr/bin/nvim"
alias vim="/usr/bin/nvim"
alias vi="/usr/bin/nvim"

alias lg="lazygit"

# ZOXIDE
eval "$(zoxide init zsh)"
alias cd="z"

# GO
export GOROOT=/usr/lib/golang
export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$GOROOT/bin:$PATH

# Ruby
export PATH=/home/philipf/bin:$PATH

# Python
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

. "$HOME/.atuin/bin/env"

eval "$(atuin init zsh --disable-up-arrow)"
#eval "$(atuin init zsh )"
source <(COMPLETE=zsh jj)

export SSL_CERT_DIR=$HOME/.aspnet/dev-certs/trust:/usr/lib/ssl/certs
export DOCKER_HOST="unix:///run/user/$(id -u)/podman/podman.sock"

# pnpm
export PNPM_HOME="/home/philipf/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	IFS= read -r -d '' cwd < "$tmp"
	[ -n "$cwd" ] && [ "$cwd" != "$PWD" ] && builtin cd -- "$cwd"
	rm -f -- "$tmp"
}

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
